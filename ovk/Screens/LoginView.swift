//
//  ContentView.swift
//  ovk
//
//  Created by Isami Ri≈°a on 23.10.2023.
//

import SwiftUI

struct LoginView: View {
    
    @Binding var debug: Bool
    
    @State private var login: String = ""
    @State private var password: String = ""
    @State private var twoFA: String = ""
    
    @State private var showAlert: Bool = false
    @State private var alertText: String = ""
    
    @State private var isLoading: Bool = false
    
    @State private var isWebViewOpened: Bool = false
    @State private var webViewURL: URL =  URL(string: "https://openvk.su/reg")!
    
    @State private var showError: Bool = false
    @State private var errorText: String = ""
    
    @State private var show2FA: Bool = false
    
    @State private var instance = "https://openvk.su"
    
    // –≠—Ç–∞ —Ö—Ä–µ–Ω—å –æ–±–Ω–æ–≤–ª—è–µ—Ç view üëáüèº
    @State private var isViewUpdated = false
    @Binding var isMainViewUpdated: Bool
    
    
    var body: some View {
        NavigationStack {
            Form {
                
                if debug {
                    Section /* DEBUG */ {
                        Text("Keychain token: \(getValueFromKeychain(forKey:"token") ?? "nil")")
                        Button("–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ —Å–≤—è–∑–∫–∏ –∫–ª—é—á–µ–π") {
                            if deleteValueFromKeychain(forKey: "token") {
                                isViewUpdated.toggle()
                            }
                        }
                        .foregroundColor(.red)
                    } header: {
                        Text("Debug")
                    }
                }
                
                
                Section /* –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏–Ω—Å—Ç–∞–Ω—Å–∞ */ {
                    TextField("–ê–¥—Ä–µ—Å", text: $instance)
                        .autocapitalization(.none)
                        .disableAutocorrection(true)
                        .onChange(of: login, perform: { value in
                            showError = false
                            show2FA = false
                        })
                } header: {
                    Text("–ò–Ω—Å—Ç–∞–Ω—Å")
                }
                
                
                Section /* –ü–æ–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–∞ */ {
                    TextField("–õ–æ–≥–∏–Ω", text: $login)
                        .autocapitalization(.none)
                        .disableAutocorrection(true)
                        .onChange(of: login, perform: { value in
                            showError = false
                            show2FA = false
                        })
                    SecureField("–ü–∞—Ä–æ–ª—å", text: $password)
                        .onChange(of: password, perform: { value in
                            showError = false
                            show2FA = false
                        })
                    if show2FA {
                        TextField("2FA", text: $twoFA)
                            .autocapitalization(.none)
                            .disableAutocorrection(true)
                            .onChange(of: login, perform: { value in
                                showError = false
                            })
                    }
                } header: {
                    Text("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞")
                } footer: {
                    if showError {
                        Text(errorText)
                            .foregroundColor(Color.red)
                    }
                }
                
                
                Section /* –ö–Ω–æ–ø–∫–∏ –≤–æ–π—Ç–∏, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è */ {
                    Button (action:{
                        isLoading = true
                        
                        // üëáüèº –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç LogIn
                        func completion(response: [String : Any]?) {
                            isLoading = false
                            
                            if (response!["error_msg"] != nil) {
                                if response!["error_msg"] as! String == "Invalid 2FA code" && !show2FA {
                                    show2FA = true
                                    isViewUpdated.toggle()
                                }
                                else {
                                    errorText = response!["error_msg"] as! String
                                    showError = true
                                }
                            }
                            else {
                                if !saveValueToKeychain(forKey: "token", value: response!["access_token"]! as! String) {
                                    errorText = "–¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Ç–∞–∫ –∫–∞–∫ –∏–º–µ–µ—Ç—Å—è –¥—Ä—É–≥–æ–π"
                                    showError = true
                                }
                                else {
                                    isMainViewUpdated.toggle()
                                    saveValueToUserDefaults(forKey: "instance", value: instance)
                                }
                            }
                            
                        }
                        LogIn(login: login, password: password, instance: instance, code: twoFA, completion: completion)
                    }) {
                        HStack(){
                            Text("–í–æ–π—Ç–∏")
                                .frame(maxWidth: .infinity, alignment: .leading)
                            if isLoading {
                                ProgressView()
                            }
                        }
                    }
                    Button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ") {
                        webViewURL = URL(string: "\(instance)/reg")!
                        isWebViewOpened = true
                    }
                    Button("–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å") {
                        webViewURL = URL(string: "\(instance)/restore")!
                        isWebViewOpened = true
                    }
                    .sheet(isPresented: $isWebViewOpened, content: {
                        NavigationStack {
                            WebView(url: webViewURL)
                                .navigationTitle("OpenVK")
                                .navigationBarTitleDisplayMode(.inline)
                        }
                    })
                }
            }
            .alert(isPresented: $showAlert, content: {
                Alert(title: Text(alertText))
            })
                // –ö–æ—Å—Ç—ã–ª—å, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å —ç–∫—Ä–∞–Ω ¬Ø\_(„ÉÑ)_/¬Ø üëáüèº (–Ω–µ –æ—Å—É–∂–¥–∞–π—Ç–µ –ø–∂)
                .background(isViewUpdated ? Color.clear : Color.clear)
                .allowsHitTesting(!isLoading)
                .navigationBarTitle("OpenVK Swift")
                .toolbar {
                    NavigationLink (destination: LoginSettings(debug: $debug, isMainViewUpdated: $isMainViewUpdated)) {Image(systemName: "gearshape")}
                }
        }
    }
}

#Preview {
    MainView()
}
